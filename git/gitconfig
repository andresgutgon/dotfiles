[color]
  ui = true

[init]
  defaultBranch = main

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[alias]
  # branch
  b = branch -v                     # branch (verbose)

  # commit
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout

  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  fixit = "!f() { git commit --fixup=$1; GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash $1~1; }; f"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # status
  st = status                       # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # Git grep
  gr = grep -Ii
	recent = !git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ | head -n 20


	wip = !git add --all . && git commit -m 'WIP'
  # Welcome to pam/fzf heaven. xargs hell
	pam= !BRANCH=`git recent | fzf` && git checkout ${BRANCH}
	pamadd= !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && git add --all ${FILES}
	pamfix= !HASH=`git log --pretty=oneline | head | fzf` && git fixit `echo ${HASH} | awk '{ print $1 }'`
	pamshow= !HASH=`git log --pretty=oneline | head | fzf` && git show `echo ${HASH} | awk '{ print $1 }'`
	pamlog= !HASH=`git log --pretty=oneline | head | fzf` && echo ${HASH} | awk '{ print $1 }' | xargs echo -n | pbcopy
	pamrebase= !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git rebase -i `echo ${HASH} | awk '{ print $1 }'`^
	pamgrep= !sh -c 'FILES=`git grep -l -A 0 -B 0 $1 $2 | fzf -x -m` && vim `echo ${FILES} | cut -d':' -f1 | xargs`' -
	pamvimlog= !HASH=`git log --pretty=oneline | head -n 50 | fzf` && HASHZ=`echo ${HASH} | awk '{ print $1 }'` && FILES=`git show --pretty='format:'  --name-only $HASHZ | fzf -x -m` && vim ${FILES}
	pamreset= !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git reset `echo ${HASH} | awk '{ print $1 }'`^

[grep]
  linenumber = true

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[merge]
  summary = true
  verbosity = 1

[apply]
  whitespace = nowarn

[branch]
  autosetuprebase = always

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking

[pull]
  ff = only

[core]
  autocrlf = false
  editor = /opt/homebrew/bin/nvim
  excludesfile = /Users/[Your Home Directory]/.gitignore_global

[advice]
  statusHints = false

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true

[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true

[user]
	name = andresgutgon
	email = andresgutgon@gmail.com

## Hack needed because Go language get packages in this way:
## git clone https://github.com/something/lol
## Git is the best :muscle: Thank you Linus!
[url "git@github.com:"]
	insteadOf = https://github.com/

[merge "railsschema"]
  name = newer Rails schema version
  driver = "ruby -e '\n\
    system %(git), %(merge-file), %(--marker-size=%L), %(%A), %(%O), %(%B)\n\
    b = File.read(%(%A))\n\
    b.sub!(/^<+ .*\\nActiveRecord::Schema\\.define(version: ([\\d_]+). do\\n=+\\nActiveRecord::Schema\\.define(version: ([\\d_]+). do\\n>+ .*/) do\n\
      %(ActiveRecord::Schema.define(version: #{[$1, $2].max}) do)\n\
    end\n\
    File.open(%(%A), %(w)) {|f| f.write(b)}\n\
    exit 1 if b.include?(%(<)*%L)'"
